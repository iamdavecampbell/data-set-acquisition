---
title: "Trade Data: Monthly Exports of Grains - Open Canada"
author: "Dean Jayatilleke & Junpu Xie & Dave Campbell"
date: '2020-07-24'
slug: trade-data-monthly-exports-of-grains-open-canada
categories: ["Trade Data"]
tags: ["Time Series", "Spatial Data Set", "Linear Chart", "Grains Export", "Trade Data", "Data Wrangling"]
subtitle: ''
summary: 'This dataset recorded 862 series from the year 1922 to 2017, the data is described by many dimensions, such as commodities about 9 different types of grains, export destinations which consist of 217 countries, 10 continents(Total Western Europe, Total Asia,…) and 1 total destination(Toal exports, all destinations), the export value unit is recorded as tonnes.'
ipynb-shell-interactivity: all
---

## Possible Analysis and Keywords

- Time Series
- Data Wrangling
- Linear Chart
- Grains Export
- Trade Data

## Data Provider

Statistics Canada's [Open Government](https://open.canada.ca/en) is a free and open-access platform  containing over 80,000 datasets across diverse subjects. The purpose of sharing all data documents with the public is to remain transparent and accessible. 

Dataset can be discovered by multiple searching methods [here](https://open.canada.ca/en/open-data), such as [Browse by subject](https://open.canada.ca/en/open-data), [Open Government Portal](https://search.open.canada.ca/en/od/?sort=last_modified_tdt%20desc&page=1&search_text=&od-search-portal=Open%20Data&_ga=2.198521263.1872662645.1597195650-535176367.1594143568) for direct keywords search, [Open Maps](https://open.canada.ca/en/open-map) which contains geospatial information data, [Open Data Inventory](https://open.canada.ca/en/search/inventory) from the government of Canada organization, [Apps Gallery](https://open.canada.ca/en/apps) for representing those mobile and web-based application data, [Open Data 101](https://open.canada.ca/en/open-data-principles) for letting people know how to use dataset and so on.

***

## Exports of Grains, by the final destination

This dataset recorded 862 observations from the year 1922 to 2017, the data is described by many dimensions, such as commodities about 9 different types of grains, export destinations of 217 countries, 10 continents(Total Western Europe, Total Asia,…) and 1 total destination (Toal exports, all destinations), the export value unit is recorded as tonnes.

The dataset and its metadata file with detailed variable descriptions have been stored together as a zip file. You can find detailed information [here](https://open.canada.ca/data/en/dataset/33a5e534-b62a-45b7-b36c-ddc16d53f6a0), and you also can quickly discover the customized table [here](https://www150.statcan.gc.ca/t1/tbl1/en/tv.action?pid=3210000801).

## Organizing Dataset

The following code is used to extract the whole dataset of grains export from the official website and perform the linear chart of total grains export to all destinations by grouping commodities.

```{python dataset download}

# packages
import requests, zipfile, io
import tempfile as tf
import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt

temp = tf.TemporaryFile()
url = "https://www150.statcan.gc.ca/n1/tbl/csv/32100008-eng.zip"
r = requests.get(url)
temp = zipfile.ZipFile(io.BytesIO(r.content))
file_list = temp.namelist()
print(file_list)

#get column names so we can chose the columns we want
meta_columns= pd.read_csv(temp.open('32100008_MetaData.csv'), nrows=0, skiprows = 8).columns.tolist()
print(meta_columns)

```

```{python dataset}

cols = ['REF_DATE', 
        'GEO', 
        'Commodity', 
        'Destinations', 
        'VALUE']
export_data = pd.read_csv(temp.open('32100008.csv'), usecols = cols)
export_data = export_data.rename(columns = {"GEO" : "location", "REF_DATE" : "date"})
export_data["year"] = pd.to_numeric(export_data["date"].str.split("-").str[0])
export_data["month"] = pd.to_numeric(export_data["date"].str.split("-").str[1])

export_data.head()
```

Some exploratory plots 

```{python}
# Summarize the annual export value by group of the year

totals = export_data.groupby(["year", 
                              "Commodity", 
                              "Destinations"], as_index=False)['VALUE'].sum()

sb.set_style("darkgrid")

sb.lineplot(data = totals[totals["Destinations"] == "Total exports, all destinations"], 
            x = "year", 
            y = "VALUE",
            hue = "Commodity").set_title("Total grains export to all destinations")

plt.ylabel("total export (tonnes)")
plt.legend(title="Commodity", 
           bbox_to_anchor=(1.05, 1), 
           loc='upper left', 
           borderaxespad=0)
plt.show();
```

## Wheat, excluding durum

The following code is used to plot total exports among different continents and then consider just the major importing countries of canola

```{python graph, warning = FALSE}

# Select the whole export dataset about canola among different continents

wheat_ex_durum = export_data[(export_data["Commodity"] == "Wheat, excluding durum") &
(export_data["Destinations"] != "Total exports, all destinations")]

wheat_ex_durum = wheat_ex_durum[wheat_ex_durum["Destinations"].str.contains("Total")]

#wheat_ex_durum.head()

wheat_totals = wheat_ex_durum.groupby(["year", 
                                       "Commodity", 
                                       "Destinations"], as_index=False)['VALUE'].sum()

plt.clf()
sb.lineplot(data = wheat_totals, 
            x = "year", 
            y = "VALUE",
            hue = "Destinations")
plt.title("Total Annual Wheat, excluding durum, export among different continents")
plt.ylabel("total export (tonnes)")
plt.legend(title="Destinations", 
           bbox_to_anchor=(1.05, 1), 
           loc='upper left', 
           borderaxespad=0)
plt.show();

```

Examining Wheat (excluding durum) for a couple of countries
```{python}

# Select a few contries and plot their imports

few_countries = export_data[(export_data["Commodity"] == "Wheat, excluding durum") &
                            ((export_data["Destinations"] == "United States") |
                             (export_data["Destinations"] == "People's Republic of China") |
                             (export_data["Destinations"] == "United Kingdom") |
                             (export_data["Destinations"] == "United Arab Emirates") |
                             (export_data["Destinations"] == "India") |
                             (export_data["Destinations"] == "Ethiopia"))]

few_countries_totals = few_countries.groupby(["year", "Destinations"], as_index=False)['VALUE'].sum()

plt.clf()
sb.lineplot(data = few_countries_totals, 
            x = "year", 
            y = "VALUE",
            hue = "Destinations")
plt.title("Total Wheat, excluding durum, exported by year")
plt.ylabel("total export (tonnes)")
plt.legend(title="Destinations", 
           bbox_to_anchor=(1.05, 1), 
           loc='upper left', 
           borderaxespad=0)
plt.show();
```

## Canola



#Now consider canola for countries that have imported at least 1,000,000 tonnes in at least one year.  Plot all of their annual import data.

```{python}

tmp_exports = export_data[(export_data["Commodity"] == "Canola (rapeseed)") &
                          (export_data["Destinations"] != "Total exports, all destinations")]

tmp_exports = tmp_exports.groupby(["year", 
                                   "Commodity", 
                                   "Destinations"], 
                                   as_index=False)['VALUE'].sum()

tmp_exports = tmp_exports[tmp_exports["Destinations"].str.contains("Total") == False]

big_countries = tmp_exports[tmp_exports["VALUE"] > 1000000]["Destinations"].unique()

tmp_exports = tmp_exports[tmp_exports["Destinations"].isin(big_countries)]

plt.clf()
sb.lineplot(data = tmp_exports, 
            x = "year", 
            y = "VALUE",
            hue = "Destinations")
plt.title("Total Canola (rapeseed),  for countries that have "
          "surpassed 1,000,000 tonnes imported in at least one year")
plt.ylabel("total export (tonnes)")
plt.legend(title="Destinations", bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)
plt.show();

```

``` {python canola by month}

canola = export_data[(export_data["Commodity"] == "Canola (rapeseed)") &
                          (export_data["Destinations"] == "Total exports, all destinations")]

plt.clf()
canola_plot = sb.lineplot(data = canola,
                          x = "month",
                          y = "VALUE",
                          hue = "year",
                          linewidth = 0.8)
sb.boxplot(data = canola,
           x = "month",
           y = "VALUE",
           fill = False,
           linewidth = 0.8,
           color = "#137")

canola_plot.set_title("Total canola (rapeseed) plants export by month")
plt.ylabel("total export (tonnes)")
plt.legend(title="Destinations", 
           bbox_to_anchor=(1.05, 1), 
           loc='upper left', 
           borderaxespad=0)
plt.show();

```
