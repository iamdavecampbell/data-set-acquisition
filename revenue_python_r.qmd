---
title: "Private Elementary and Secondary Schools Revenues - Open Canada"
author: "Dean Jayatilleke, Junpu Xie, and Dave Campbell"
date: '2024-08-10'
execute:
  render: auto
  slug: private-elementary-and-secondary-schools-revenues-open-canada
categories: ["Regression","Time Series", "Open Canada","zipfiles", "Software:Python","Software:R","zipfiles", "csv files"]
subtitle: ''
summary: 'This dataset contains 138 observational series and several variables, which include the geography of Canada and the other 13 provinces, 9 direct sources of funds and total funded revenue from 1947 to 2002.'
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Data Provider

The provincial government of Ontaio provides open access to thousands of data sets via their [Open Data Ontario](https://data.ontario.ca/en/) portal. The purpose of sharing all data documents with the public is to remain transparent and accessible.  More details about the data license, training materials, and other information can be found [here](https://data.ontario.ca/about).

***

## Private Elementary and Secondary Schools Revenues, by Direct Source of Funds

This dataset contains 138 observations across provinces and funding sources from 1947 to 2002.

The dataset and its metadata file which contains detailed variable descriptions have been stored together as a zip file. The data resource and its description can be found [here](https://open.canada.ca/data/en/dataset/5b7fd541-5ae6-4602-a895-29210f0abd78), you also can quickly discover the customized table [here](https://www150.statcan.gc.ca/t1/tbl1/en/tv.action?pid=3710008401).


## Libraries

::: {.panel-tabset group="language"}
## R

```{r rlib, message = FALSE, warning = FALSE}
library(tidyverse)
library(viridis)
library(hrbrthemes)
library(GGally)
```
## Python

```{python plib}
import requests, zipfile, io
import tempfile as tf
import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt
```
:::

### Organizing Dataset

The following code is used to download and organize the original dataset, and only select the important variables to form a new dataset.

::: {.panel-tabset group="language"}
## R

```{r rdataset, message = FALSE, warning = FALSE}

# Download the zip file of school revenues dataset
temp <- tempfile()
download.file("https://www150.statcan.gc.ca/n1/tbl/csv/37100084-eng.zip",temp)
(file_list <- as.character(unzip(temp, list = TRUE)$Name))
revenue <- read_csv(unz(temp, "37100084.csv"))
unlink(temp) # Delete temp file

# Organize the dataset

revenue <- revenue |> 
  separate(REF_DATE, c("year", "year.end"), "/") |> 
  mutate(year = as.numeric(year))|>
  drop_na(VALUE) |>
  rename_all(make.names)
  

# take a look at the data:
revenue |> glimpse()
```

## Python

```{python pdataset}
# Download the zip file of plant sales and production

temp = tf.TemporaryFile()
url = "https://www150.statcan.gc.ca/n1/tbl/csv/37100084-eng.zip"
r = requests.get(url)
temp = zipfile.ZipFile(io.BytesIO(r.content))
file_list = temp.namelist()
print(file_list)


revenue = pd.read_csv(temp.open("37100084.csv"))


revenue[["year", "year end"]] = revenue["REF_DATE"].str.split("/", n=1, expand = True)
revenue = revenue.dropna(subset = ["VALUE"])
revenue["year"] = revenue["year"].astype(int)

revenue.head()

```

:::



### School Revenue by Different Funded Source in Canada

The following code is used to draw the stacked area chart so that we can directly see the time-series trend and proportion of different funding sources over the years.


::: {.panel-tabset group="language"}

## R 

```{r rgraph, warning = FALSE, message = FALSE}

# Subset a reveune dataset which only focus on different funding source in Canada and plot the graph
revenue |> subset( GEO == "Canada" & Direct.source.of.funds != "Total revenues")|>
ggplot( aes(x=year, y=VALUE, group=Direct.source.of.funds, colour =Direct.source.of.funds)) + 
    geom_line(alpha=0.6 , size=.5) +
    scale_fill_viridis(discrete = T) +
    theme_ipsum() + 
    labs(title = "School Revenue Funded \n from Different Sources")+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

```

## Python
```{python pfunds from different revenue sources}

# Subset a reveune dataset which only focus on different funding source in Canada and plot the graph

sb.set_style("darkgrid")

sb.lineplot(data = revenue[(revenue["GEO"] == "Canada") &
                           (revenue["Direct source of funds"] != "Total revenues")],
                           x = "year",
                           y = "VALUE", 
                           hue = "Direct source of funds")
plt.title("School Revenue Funded from Different Sources")
plt.legend(title = "Direct source of funds",
           bbox_to_anchor=(1.05, 1),
           loc='upper left',
           borderaxespad=0)
plt.show();

```
:::
### Total School Revenue in Different Provinces

The following code is used to draw the stacked area chart so that we can directly see the time-series trend and proportion in different provinces over the years.



::: {.panel-tabset group="language"}

## R 
```{r rprovince, warning = FALSE, message = FALSE}


# Subset a reveune dataset which only focuses on different funding source in Canada and plot the graph
revenue |> subset( GEO != "Canada" & Direct.source.of.funds == "Total revenues")|>
ggplot( aes(x=year, y=VALUE, group=GEO, colour =GEO)) + 
    geom_line(alpha=0.6 , size=.5) +
    scale_fill_viridis(discrete = T) +
    theme_ipsum() +
    ggtitle("Total School Revenue Funded \n in Different Provinces")+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))


```

## python
```{python prevenue in different provinces}

plt.clf()
sb.lineplot(data = revenue[(revenue["GEO"] != "Canada") &
                           (revenue["Direct source of funds"] == "Total revenues")],
                           x = "year",
                           y = "VALUE", 
                           hue = "GEO")
plt.title("Total School Revenue Funded in Different Provinces")
plt.legend(title = "Province",
           bbox_to_anchor=(1.05, 1),
           loc='upper left',
           borderaxespad=0)
plt.show();

```


::: 

### Tidy the variables

There are quite a few variables that aren't really of interest like *SCALAR_ID* and *COORDINATE*, while other variables are hidden within the single column *Direct.source.of.funds*.  Here we wish to rearrange the data from a tall format into a wider format.  The function *pivot_wider* takes a column and spreads its factors into new columns.  This makes the observational unit combinations of *year* and *GEO*.  




::: {.panel-tabset group="language"}

## R 
```{r rpivotwider,cache = TRUE}
# select the columns of interest
revenue_wide = revenue |> 
      select(year, GEO, Direct.source.of.funds, VALUE) |> 
  # pivot wider by taking factors from Direct.source.of.funds
  # fill in the variable with values from VALUE
      pivot_wider(names_from = Direct.source.of.funds, values_from = VALUE) |>    
  # rebuild the variable names so that they do not have spaces
      rename_all(make.names)

revenue_wide |> glimpse()

```

## python 

```{python ppivotwider}

revenue_wide = revenue[["year",
                         "GEO",
                         "Direct source of funds",
                         "VALUE"]]
revenue_wide = pd.pivot_table(revenue_wide,
                              values = "VALUE",
                              index = ["year", "GEO"],
                              columns = "Direct source of funds").reset_index()


revenue_wide.head()
```

:::
## Wider data makes easier plotting and analysis

To predict the school fees, one would need to consider the other sources of funding.  Such a regression model can't be directly made without first widening the data.  Below, the variables are plotted against each other and a basic linear model is performed.

::: {.panel-tabset group="language"}

## R 
```{r rwider plots, message = FALSE, warning = FALSE}
revenue_wide |> 
  filter(GEO=="Canada") |> 
 ggpairs()
```

## python
```{python pwiderplots}

sb.pairplot(data = revenue_wide);

```
:::

::: {.panel-tabset group="language"}

## R 
```{r rlinear modelling}

CanadaWide = revenue_wide |> 
  filter(GEO=="Canada")
lm(Fees~Transfers.from.school.boards+Municipal.government+Provincial.government+Federal.government,CanadaWide)

```

## python 

```{python plinear modelling}

from sklearn.linear_model import LinearRegression


canada_wide = revenue_wide[revenue_wide["GEO"] == "Canada"]
canada_wide = canada_wide.dropna()
model = LinearRegression()

x = canada_wide[['Transfers from school boards',
                    'Municipal government',
                    'Provincial government',
                    'Federal government']]

y = canada_wide['Fees']

model.fit(x,y)

print("Intercept: ", model.intercept_)
print("Coefficients: \n", list(zip(list(x), model.coef_)))
```

:::