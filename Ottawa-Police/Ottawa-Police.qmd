---
title: Ottawa Police Open Data"
execute:
    cache: true
    jupyter: python3
author: "Dean Jayatilleke & Junpu Xie & Dave Campbell"
date: '2024-07-10'
slug: 
categories: []
tags: ["Ottawa"]
subtitle: ''
summary: 'Retrieving Ottawa Police Open Data and producing plots using Open Street Maps'
output: html_document
ipynb-shell-interactivity: all
---

## Possible Analysis and Keywords

- Open Street Maps
- Bike Thefts
- Shootings
- Crime
- Motor Vehicle Thefts
- Police Data

## Data Provider

Ottawa Police's [Community Safety Data Portal](https://data.ottawapolice.ca/) is an open-access data portal designed to provide transparent and accessible information about police activity to the public. Data is available in tabular and geographic forms, and can be freely downloaded and interacted with.  

## Plotting Geographical Data Points on Open Street Maps

```{python modules}

import pandas as pd 
import geopandas as gp # Useful for manipulating geographic data in dataframes
import mapclassify # Geopandas uses these to produce plots on Open Street Maps 
import folium # Geopandas uses these to produce plots on Open Street Maps 


```

A word about retrieving Ottawa Police Data.

Ottawa Police datasets are available to download as CSVs, however the download URL is generated on demand and expires shortly, within a few days or sometimes even hours. Also, the availability of dataset csv download is somewhat tenuous, and you may find that particular dataset is unavailable for download at a given time.  For this reason, it is recommended that the dataset of interest be downloaded into a working directory. It can then be read using pd.read_csv directly from that file. Errors may occur if a download url is passed directly to pd.read_csv.

### Shootings 

```{python shootings data}

#https://data.ottawapolice.ca/datasets/aeb09d77912246139014516c8eeefcd9_0/about

shootings = pd.read_csv("Shootings_Open_Data_3086844035331583488.csv")

shootings.head()

```

The location of each reported shooting is given in the EPSG:2951 coordinate system, represented in the X and Y columns. In order to plot these points on Open Street Maps, we pass the pandas dataframe to a [Geopandas](https://geopandas.org/en/stable/) dataframe, which is better suited for geographical data. The Geopandas explore function usings libraries folium and mapclassify to plot on open street maps.  

```{python shootings map}

geo_df = gp.GeoDataFrame(
    shootings, geometry=gp.points_from_xy(shootings["x"], shootings["y"]), crs="epsg:2951")

geo_df.explore()
```

### Bike Thefts

```{python bicycle thefts dataset}

#https://data.ottawapolice.ca/datasets/eff8a6410ec74136b5f611017e244a4e_0/about

bike_thefts = pd.read_csv("Bike_Theft_Open_Data_3884822422354997826.csv")

bike_thefts.head()

```


```{python expensive bicycle thefts map}

geo_df = gp.GeoDataFrame(
    bike_thefts, geometry=gp.points_from_xy(bike_thefts["x"], bike_thefts["y"]), crs="epsg:2951")

geo_df[geo_df["Bicycle Value"] > 2000].explore()

```

### Motor Vehicle Thefts

```{python motor vehicle theft data}

#https://data.ottawapolice.ca/datasets/e5453a203e2a4baeac32ac4e70ce852c_0/about

vehicle_theft = pd.read_csv("Auto_Theft_Open_Data_2158590371504723284.csv")

vehicle_theft.head()

```

```{python vehicle makes}

vehicle_theft["Vehicle Make"].unique()

```

```{python stolen volkswagons map}

vehicle_theft_geo = gp.GeoDataFrame(
    vehicle_theft, geometry=gp.points_from_xy(vehicle_theft["x"], vehicle_theft["y"]), crs="epsg:2951")

vehicle_theft_geo[vehicle_theft_geo["Vehicle Make"] == "VOLK"].explore()

```


### Historical Crime Data 2013 - 2022 

```{python crime dataset}

#https://data.ottawapolice.ca/datasets/25a533e5e7c945faadf37765639657a5_16/about

crime = pd.read_csv("CrimeMap_YE_-5915901148112462236.csv")

crime.head()
```


Note that this dataset contains over 165,000 records! That is too many to plot on a single map, so it's worth filtering for particular crimes and dates before plotting.

```{python offences}

crime["Offence_Category"].unique()

```

```{python year}

crime["Reported_Year"].unique()

```


```{python break and enters 2023 map}

crime_geo = gp.GeoDataFrame(
    crime, geometry=gp.points_from_xy(crime["x"], crime["y"]), crs="epsg:2951")

crime_geo[(crime_geo["Offence_Category"] == "Break and Enter") &
          (crime_geo["Reported_Year"] == 2023)].explore()

```





